// This file is part of midnightntwrk/example-counter.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pragma language_version >= 0.16 && <= 0.17;

import CompactStandardLibrary;
import "./AccessControl" prefix AccessControl_;

export struct UserInfo {
  rewards: Uint<128>,
  data: Boolean,
}

export sealed ledger Verifiers: Bytes<32>;

export ledger beneficiaries: Map<Bytes<32>, UserInfo>;

witness localSecretKey(): Bytes<32>;

constructor() {
  Verifiers = persistentHash<Bytes<32>>(pad(32, "VERIFIERS"));
  AccessControl__grantRole(AccessControl_DEFAULT_ADMIN_ROLE, left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey()));
}

// public state
export ledger round: Counter;

// transition function changing public state
export circuit increment(): [] {
  AccessControl_assertOnlyRole(AccessControl_DEFAULT_ADMIN_ROLE);

  round.increment(1);
}

export circuit increment2(): [] {
  AccessControl_assertOnlyRole(Verifiers);

  round.increment(2);
}

export circuit addBeneficiary(beneficiary: Bytes<32>, data: Boolean): [] {
  AccessControl_assertOnlyRole(Verifiers);
  // TODO: Manage when a beneficiary is already in the map

  beneficiaries.insert(disclose(beneficiary), UserInfo { rewards: 0, data: disclose(data) });
}

export circuit lookupData(): Boolean {
  return beneficiaries.lookup(disclose(publicKey(localSecretKey()))).data;
}

export circuit grantVerifier(verifier: ZswapCoinPublicKey): [] {
  AccessControl_assertOnlyRole(AccessControl_DEFAULT_ADMIN_ROLE);

  AccessControl__grantRole(Verifiers, left<ZswapCoinPublicKey, ContractAddress>(verifier));
}


export circuit publicKey(sk: Bytes<32>): Bytes<32> {
  return persistentHash<Vector<2, Bytes<32>>>([pad(32, "authorized-rewards:pk:"), sk]);
}
